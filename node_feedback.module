<?php

//TODO edit this
/**
 * @file
 * Node Feedback module for flagging with feedback.
 *
 * Node Feedback is to flag the nodes and also provide feedback form
 * with flag stats for individual node pages.
 */

/**
 * Implements hook_menu().
 */
function node_feedback_menu() {
  $items['admin/config/user-interface'] = [
    'title' => 'Node Feedback',
    'description' => 'Settings related to Node Feedback module.',
    'position' => 'right',
    'weight' => 0,
    'access arguments' => ['administer site configuration'],
  ];
  $items['admin/config/user-interface/nf-settings'] = [
    'title' => 'Node Feedback',
    'description' => 'Configuration settings for NF widget',
    'page callback' => 'backdrop_get_form',
    'page arguments' => ['node_feedback_settings_form'],
    'access arguments' => ['administer site configuration'],
    'type' => MENU_NORMAL_ITEM,
  ];
  $items['node/%node/nf-stats'] = [
    'title' => 'Node Feedback Stats',
    'page callback' => 'node_feedback_stats',
    'page arguments' => [1],
    'access callback' => ['node_feedback_stats_check'],
    'type' => MENU_LOCAL_TASK,
  ];
  return $items;
}

/**
 * Implements hook_config_info().
 */
function node_feedback_config_info() {
  $prefixes['node_feedback.settings'] = [
    'label' => t('Node Feedback'),
    'group' => t('Node Feedback'),
  ];
  return $prefixes;
}

/**
 * Function for access callback.
 */
function node_feedback_stats_check() {
  $nf_show_stats = config_get('node_feedback.settings', 'nf_show_stats');
  global $user;
  $user_roles = $user->roles;
  $access = FALSE;
  $nf_show_stats = array_filter($nf_show_stats);

  // User role check to show NF stats menu.
  foreach ($user_roles as $rid => $user_role) {
    if (in_array($user_role, $nf_show_stats)) {
      $access = TRUE;
      // Content type check to show NF stats menu.
      if (arg(0) == 'node' && is_numeric(arg(1))) {
        $node = node_load(arg(1));
        $nf_allowed_content_types = config_get('node_feedback.settings', 'nf_allowed_content_type');
        if (count($nf_allowed_content_types) > 0) {
          if ($nf_allowed_content_types[$node->type]) {
            $access = TRUE;
          } else {
            $access = FALSE;
          }
        }
      }
      break;
    }
  }

  return $access;
}

/**
 * Callback function for NF Stats.
 *
 * @url: node/%node/nf-stats
 */
function node_feedback_stats($nid) {
  $output = views_embed_view('node_feedback_stats', 'block');
  return $output;
}

/**
 * Callback function for NF Settings.
 *
 * @url: admin/config/ef/nf-settings
 */
function node_feedback_settings_form() {
  $config = config('node_feedback.settings');

  $flag_header_text = $config->get('nf_header_text');
  $form['#config'] = 'node_feedback.settings';
  $form['nf_header_text'] = [
    '#type' => 'textfield',
    '#title' => t('Header text'),
    '#description' => t('The header text appears before the Node Feedback widget.'),
    '#default_value' => $flag_header_text,
    '#size' => 60,
    '#maxlength' => 128,
    '#required' => FALSE,
  ];

  $flag_button_text_value = $config->get('nf_button_text');

  $form['nf_button_text'] = [
    '#type' => 'textfield',
    '#title' => t('Button text'),
    '#default_value' => $flag_button_text_value,
    '#size' => 60,
    '#maxlength' => 128,
    '#required' => TRUE,
  ];

  $flag_button_class_value = $config->get('nf_button_class');

  $form['nf_button_class'] = [
    '#type' => 'textfield',
    '#title' => t('Extra classes for buttons'),
    '#description' => t('Add any extra classes for the submit buttons, separated by spaces.'),
    '#default_value' => $flag_button_class_value,
    '#size' => 60,
    '#maxlength' => 128,
    '#required' => TRUE,
  ];

  $flag_thanks_message = $config->get('nf_thanks_message');
  $form['nf_thanks_message'] = [
    '#type' => 'textfield',
    '#title' => t('Thanks message'),
    '#description' => t('Message displayed after leaving a feedback.'),
    '#default_value' => $flag_thanks_message,
    '#size' => 60,
    '#maxlength' => 128,
    '#required' => FALSE,
  ];

  $flag_feedback_title = $config->get('nf_feedback_title', t('Tell us more..'));
  $form['nf_feedback_title'] = [
    '#type' => 'textfield',
    '#title' => t('Feedback Title'),
    '#description' => t('Message to be displayed as title for the feedback form.'),
    '#default_value' => $flag_feedback_title,
    '#size' => 60,
    '#maxlength' => 128,
    '#required' => FALSE,
  ];

  $allowed_content_types = [];
  $content_types = node_type_get_types();
  foreach ($content_types as $content_type) {
    $machine_name = $content_type->type;
    $content_type_name = $content_type->name;
    $allowed_content_types[$machine_name] = $content_type_name;
  }
  $nf_allowed_content_type = $config->get('nf_allowed_content_type');
  $form['nf_allowed_content_type'] = [
    '#type' => 'checkboxes',
    '#title' => t('Allowed content type'),
    '#default_value' => $nf_allowed_content_type,
    '#options' => $allowed_content_types,
    '#description' => '',
    '#multiple' => TRUE,
    '#required' => TRUE,
    '#weight' => 15,
  ];

  $roles = user_roles();
  $nf_show_stats = $config->get('nf_show_stats');
  $form['nf_show_stats'] = [
    '#type' => 'checkboxes',
    '#title' => t('Show stats for specific roles'),
    '#default_value' => $nf_show_stats,
    '#options' => $roles,
    '#description' => t('Use this option to show/hide the feedback stats while viewing the node'),
    '#multiple' => TRUE,
    '#required' => TRUE,
    '#weight' => 15,
  ];

  if (module_exists('honeypot')) {
    $nf_honeypot_protect = $config->get('nf_honeypot_protect');
    $form['nf_honeypot_fieldset'] = [
      '#type' => 'fieldset',
      '#title' => t('Honeypot form protection'),
      '#weight' => 16,
    ];
    $form['nf_honeypot_fieldset']['nf_honeypot_protect'] = [
      '#type' => 'checkbox',
      '#title' => t('Use honeypot form protection.'),
      '#default_value' => $nf_honeypot_protect,
    ];
  }

  return system_settings_form($form);
}

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function node_feedback_block_info() {
  $blocks['node_feedback'] = [
    // info: The name of the block.
    'info' => t('Node Feedback: form'),
    'description' => 'Node Feedback form.',
    'required contexts' => ['node' => 'node'],
  ];
  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function node_feedback_block_view($delta = '', $settings = [], $contexts = []) {
  // The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'node_feedback':
      $node = $contexts['node'];
      $nf_allowed_content_types = config_get('node_feedback.settings', 'nf_allowed_content_type');
      // dpm($nf_allowed_content_types);
      if (count($nf_allowed_content_types) > 0 && $nf_allowed_content_types[$node->type]) {
        $args = [
          'nid' => $node->nid,
        ];
        $nf_form = backdrop_get_form('node_feedback_form', $args);
        // Pull out the contextual information (a node in this case) from the
        // contexts array.
        $block['subject'] = t('Feedback for this node');
        $block['content'] = backdrop_render($nf_form);
      }
    }
  return $block;
}

/**
 * Node Feedback widget form.
 */
function node_feedback_form($form, &$form_state) {
  $config = config('node_feedback.settings');
  if (isset($form_state['show']) && $form_state['show'] === TRUE) {
    $flag_feedback_title = $config->get('nf_feedback_title');
    $form['comment'] = [
      '#prefix' => '<div id="node_feedback_form_wrapper"><div class="nf_feedback_form">',
      '#suffix' => '</div>',
      '#type' => 'textarea',
      '#title' => $flag_feedback_title,
      '#default_value' => '',
      '#attributes' => ['autocomplete' => 'off'],
    ];
    $form['submit-feedback'] = [
      '#type' => 'submit',
      '#value' => t('Submit'),
      '#ajax' => [
        'callback' => 'node_feedback_form_callback_feedback_submit',
        'wrapper' => 'node_feedback_form_wrapper',
      ],
      '#attributes' => [
        'class' => explode(' ', $config->get('nf_button_class')),
      ],
      '#suffix' => '</div>',
    ];
  } elseif (isset($form_state['comment_feedback']) && $form_state['comment_feedback'] === TRUE) {
    $form['flag_response_text'] = [
      '#type' => 'markup',
      '#markup' => '<div class="messages status">' . $config->get('nf_thanks_message') . '</div>',
    ];
  } else {
    $flag_header_text = $config->get('nf_header_text');
    $form['header_text'] = [
      '#prefix' => '<div id="node_feedback_form_wrapper"><div class="nf_header_text">',
      '#suffix' => '</div>',
      '#type' => 'markup',
      '#markup' => $flag_header_text,
    ];
    $flag_button_text_value = $config->get('nf_button_text');
    $form['submit'] = [
      '#type' => 'submit',
      '#value' => $flag_button_text_value,
      '#ajax' => [
        'callback' => 'node_feedback_form_callback',
        'wrapper' => 'node_feedback_form_wrapper',
      ],
      '#attributes' => [
        'class' => explode(' ', $config->get('nf_button_class')),
      ],
      '#suffix' => '</div>',
    ];
  }

  return $form;
}

/**
 * Callback function for no.
 */
function node_feedback_form_callback($form, $form_state) {
  global $user;
  if (!form_get_errors()) {
    $name = $user->name ? $user->name : 'anonymous';
    $form_state['show'] = TRUE;

    // TODO spam control
    $nid = $form_state['build_info']['args'][0]['nid'];

    $fields = [
      'nid' => $nid,
      'name' => $name,
      'timestamp' => time(),
    ];
    $nf_id = db_insert('node_feedback')
      ->fields($fields)
      ->execute();

    $form_state['nf_id'] = $nf_id;

    $form['comment']['#default_value'] = '';
    $form['comment']['#attributes'] = [
      'autocomplete' => 'off',
      'placeholder' => t('Write your comment'),
    ];
  }
  else {
    $form_state['show'] = FALSE;
  }
  return backdrop_rebuild_form('node_feedback_form', $form_state, $form);
}

/**
 * Callback function for feedback submit.
 */
function node_feedback_form_callback_feedback_submit($form, $form_state) {
  $nf_id = $form_state['nf_id'];

  $feedback = $form_state['values']['comment'];
  $fields = [
    'response_text_feedback' => $feedback,
    'timestamp' => time(),
  ];
  db_update('node_feedback')
  ->fields($fields)
  ->condition('nfid', $nf_id, '=')
  ->execute();

  unset($form_state['show'], $form_state['nf_id']);

  $form_state['comment_feedback'] = TRUE;

  $form['comment']['#default_value'] = '';
  $form['comment']['#attributes'] = [
    'autocomplete' => 'off',
    'placeholder' => t('Write your comment'),
  ];

  return backdrop_rebuild_form('node_feedback_form', $form_state, $form);
}

/**
 * Implements hook_views_api().
 */
function node_feedback_views_api() {
  return [
    'api' => 3,
    'path' => backdrop_get_path('module', 'node_feedback') . '/views',
  ];
}

/**
 * Deletes a feedback.
 *
 * @param $feedback
 *   The feedback object.
 *
 * @ingroup actions
 */
function node_feedback_delete_action($feedback, $context = []) {
  //TODO implement edit actions on feedbacks
}

/**
 * Implements hook_honeypot_protect_forms_info().
 */
function node_feedback_honeypot_protect_forms_info() {
  return [
    'node_feedback_form',
  ];
}
